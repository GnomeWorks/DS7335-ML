=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=-=-=-=
I have decided to use random weights and scores for the people and restaurant matrix
As this would be the case in real world and will have an element of surprise

=-=-=-=-=-=-=-=-= People Names =-=-=-=-=-=-=
['Ross', 'Rachel', 'Joey', 'Monica', 'Phoebe', 'Chandler', 'Jerry', 'George', 'Kramer', 'Elaine']

=-=-=-=-=-=-=-=-= Category =-=-=-=-=-=-==-=-=
['Willingness to travel', 'Desire for new experience', 'Cost', 'Choice of Menu', 'Service', 'Environment']

Transform the user data into a matrix(M_people). Keep track of column and row ids
=-=-=-=-=-=-=-=- People Matrix =-=-=-=-=-=-=
[[0.07 0.26 0.17 0.28 0.03 0.19]
 [0.06 0.39 0.17 0.27 0.1  0.02]
 [0.34 0.02 0.23 0.08 0.08 0.25]
 [0.25 0.02 0.31 0.18 0.04 0.2 ]
 [0.04 0.2  0.29 0.41 0.03 0.02]
 [0.33 0.04 0.3  0.25 0.05 0.03]
 [0.24 0.46 0.02 0.05 0.   0.23]
 [0.09 0.33 0.1  0.3  0.05 0.12]
 [0.28 0.02 0.02 0.12 0.05 0.52]
 [0.58 0.18 0.   0.07 0.03 0.14]]
Each row represents a person and each column is a category in the above order
p_names and p_cats are the row and column headers 

=-=-=-=-=-=-= Restaurants Names =-=-=-=-=-=-=-=-=
['Flacos', 'PF Changs', 'Madeo', 'Souplantation', 'TGI Friday', 'The Stand', 'Lamandier', 'Amelie', 'Fiesta', 'Chilis']

=-=-=-=-=-=-=-=-= Category =-=-=-=-=-=-=-=-=-=-=-=
['Distance', 'Novelty', 'Cost', 'Food-Beverage Options', 'Staff', 'Ambience']

Transform the restaurant data into a matrix(M_resturants) use the same column index.
=-=-=-=-=-=-=-=- Restaurants Matrix =-=-=-=-=-=-=
[[ 6  9  9  2  5  1]
 [ 7  1  7 10  4  9]
 [ 7  4  1  7 10  1]
 [ 2  2  1  7  2  9]
 [ 2  3  7  8  8  1]
 [ 3  4  1  2  8 10]
 [ 7  1 10  6  2  8]
 [ 4 10  1  1  3  7]
 [ 9  2  1  5  2  6]
 [10  5  4  5  8  4]]
Each row represents a restaurant and each column is a category in the above order
r_names and r_cats are the row and column headers 

The most important idea in this project is the idea of a linear combination.
Informally describe what a linear combination is and how it will relate to our restaurant matrix.

Linear Combination is the process of simplifying two algebraic equation so that one variable is eliminated.
In this People vs. Restaurant metrics the weights and ratings are simplified for arriving at the rank

Next compute a new matrix (M_usr_x_rest  i.e. an user by restaurant) from all people
=-=-=-=-=-=-= Restaurants X People =-=-=-=-=-=-=-=-=
[[5.19 6.46 5.1  5.23 5.64 5.82 6.09 5.38 3.05 5.53]
 [6.57 5.28 7.38 7.7  6.91 7.42 4.85 5.94 8.2  6.32]
 [4.15 5.06 4.3  4.   4.56 5.05 4.12 4.77 3.92 5.71]
 [4.56 3.34 3.92 3.99 3.88 3.16 3.84 4.22 6.24 3.33]
 [4.78 5.46 3.88 4.69 6.25 5.31 2.63 4.79 2.64 2.64]
 [4.12 3.45 4.63 3.82 2.47 2.65 4.98 3.89 6.78 4.24]
 [5.71 4.49 7.34 7.63 6.06 7.19 4.48 4.82 7.16 5.84]
 [4.75 5.02 3.86 3.21 3.09 2.63 7.24 5.05 5.25 5.26]
 [3.92 3.16 5.39 4.78 3.28 4.88 4.73 3.89 6.4  6.83]
 [5.08 5.46 6.46 5.86 4.93 6.47 5.95 5.33 6.06 7.85]]

What does the a_ij matrix represent?
Each Rows represents Restaurants and Column represents the People

Sum all columns in M_usr_x_rest to get optimal restaurant for all users, What do the entries represent?
Each entry represents overall score of each restaurants by all users, which is the raw score out of 100

['Flacos', 'PF Changs', 'Madeo', 'Souplantation', 'TGI Friday', 'The Stand', 'Lamandier', 'Amelie', 'Fiesta', 'Chilis']
[53.49 66.57 45.64 40.48 43.07 41.03 60.72 45.36 47.26 59.45]

Choose a person and compute(using a linear combination) the top restaurant for them, What does each entry in the resulting vector represent.
Below resulting vector represents the favorite restaurant for the person
=-=-=-=-=-= Most Favorite Restaurant of =-=-=-=-=-=
Ross is PF Changs
Rachel is Flacos
Joey is PF Changs
Monica is PF Changs
Phoebe is PF Changs
Chandler is PF Changs
Jerry is Amelie
George is PF Changs
Kramer is PF Changs
Elaine is Chilis

Which restaurant got max ratings? and by whom?
Flacos got high score from  Rachel
PF Changs got high score from  Kramer
Madeo got high score from  Elaine
Souplantation got high score from  Kramer
TGI Friday got high score from  Phoebe
The Stand got high score from  Kramer
Lamandier got high score from  Monica
Amelie got high score from  Jerry
Fiesta got high score from  Elaine
Chilis got high score from  Elaine

Now convert each row in the M_usr_x_rest into a ranking for each user and call it M_usr_x_rest_rank.
Do the same as above to generate the optimal restaurant choice

=-=-=-=-=-= Ranks of Restaurants by all People =-=-=-=-=-=-=-=
1: Least & 10: Most Favorite Restaurant

[('Souplantation', 1), ('The Stand', 2), ('TGI Friday', 3), ('Amelie', 4), ('Madeo', 5), ('Fiesta', 6), ('Flacos', 7), ('Chilis', 8), ('Lamandier', 9), ('PF Changs', 10)]

Why is there a difference between the two?, What problem arrives?
A restaurant might get higher score from a person which doesn't mean that is their favorite
Low score across one restaurants creates bias makes the rank out of sequence

What does represent in the real world?
It is difficult to control individual choice as it is based on the individual experience.
With less number of examples and outliers may makes the recommendation less reliable

How should you preprocess your data to remove this problem.
Could remove the outlier (scored very low) to improves the recommendation
Overall Score could be used to decide on while making decisions
Check if there are any issue with these scores for errors.

Find user profiles that are problematic, explain why?
Heat map created on the matrix would help identify the person who made those choices for further action/decision
Mostly those who score low across creates skewness.

Silhouette scores are between -1 to +1
-1: Incorrect, 0: Overlapping  & +1: Highly densed Clustering
Purity of the cluster is measured with higher score which also means well separated and highly densed

For n_clusters = 2 
 The average silhouette_score is : 0.3386121722903288 
 Individual silhouette scores were: [0.02194973 0.60083132 0.33795535 0.40807226 0.25252528 0.39433586
 0.57822237 0.36891709 0.11116146 0.31215101] 
 and their assigned clusters: [1 0 1 1 1 1 0 1 1 0]

For n_clusters = 3 
 The average silhouette_score is : 0.34262022230583233 
 Individual silhouette scores were: [0.2713276  0.57825245 0.14383734 0.31002158 0.3386796  0.49289435
 0.55507852 0.23458021 0.22996709 0.27156346] 
 and their assigned clusters: [2 0 2 1 2 1 0 1 1 0]

For n_clusters = 4 
 The average silhouette_score is : 0.2641022879958894 
 Individual silhouette scores were: [0.29911715 0.54772004 0.1700831  0.309306   0.         0.45901106
 0.52096055 0.11804247 0.11452417 0.10225834] 
 and their assigned clusters: [1 2 1 0 3 0 2 0 0 2]

Given the size of the data and random weights and score, 2 (or) 3 clusters are optimal choice
Decided to try two & three clusters for PCA + Kmeans analysis


Created Dentogram to visualize the similarity and dissimilarity between peoples / restaurants

Since the ground truth scores are not available with People X  Restaurant Matrix
Decided to use Davies Bouldin Score & Calinski Harabaz Score to check the purity of the cluster
Davies Bouldin Score: Lower means better separated, zero is the lowest
Calinski Harabaz Score: Higher means dense and well separated

No. of Clusters		Calinski Harabaz Index		Davies Bouldin Score
	 2 		 10.401958231370218 		 0.6004042925855748
	 3 		 9.275945209711713 		 0.8114162770162299
	 4 		 6.373663737434782 		 0.8308179865764836

These two scores also confirms the 2 (or) 3 clusters are better and good depending upon the data.
Refer to the guidelines on the scores

Think of two metrics to compute the dissatisfaction with the group.
Created the low score matrices to identify the least favorite


=-=-=-=-=-= Least Favorite Restaurant of =-=-=-=-=-=
Ross is Fiesta
Rachel is Fiesta
Joey is Amelie
Monica is Amelie
Phoebe is The Stand
Chandler is Amelie
Jerry is TGI Friday
George is The Stand
Kramer is TGI Friday
Elaine is TGI Friday

Flacos got low score from  Kramer
PF Changs got low score from  Jerry
Madeo got low score from  Kramer
Souplantation got low score from  Chandler
TGI Friday got low score from  Jerry
The Stand got low score from  Phoebe
Lamandier got low score from  Jerry
Amelie got low score from  Chandler
Fiesta got low score from  Rachel
Chilis got low score from  Phoebe

Should you split in two groups today?
Yes, On multiple runs there were some resulted in two way split since the weights and scores are random

If there had to be one group, one option is to try assigning higher weightage to distance
In real world this could be a deciding factor

Ok. Now you just found out the boss is paying for the meal. How should you adjust. Now what is best restaurant?
!! Awesome, make the cost weight from people matrix to zero and/or restaurant matrix score to one and recalculate the rank.

=-=-=-=-= Restaurants Rank by all People (Boss is paying) =-=-=-=-=-=-=
[('TGI Friday', 1), ('Souplantation', 2), ('Flacos', 3), ('The Stand', 4), ('Amelie', 5), ('Madeo', 6), ('Lamandier', 7), ('Fiesta', 8), ('Chilis', 9), ('PF Changs', 10)]
=-=-=-=-= Restaurants Rank by all People (Boss is NOT paying) =-=-=-=-=-=-=
[('Souplantation', 1), ('The Stand', 2), ('TGI Friday', 3), ('Amelie', 4), ('Madeo', 5), ('Fiesta', 6), ('Flacos', 7), ('Chilis', 8), ('Lamandier', 9), ('PF Changs', 10)]

As you can clearly see the shift in ranking.
Tomorrow you visit another team. You have the same restaurants and they told you their optimal ordering for restaurants.
Can you find their weight matrix?
Yes, Using matrix inverse, we can figure out weight matrix..
Below is the snapshot of the original and inverse weights..
People Weight => Original
[[0.07 0.26 0.17 0.28 0.03 0.19]
 [0.06 0.39 0.17 0.27 0.1  0.02]
 [0.34 0.02 0.23 0.08 0.08 0.25]
 [0.25 0.02 0.31 0.18 0.04 0.2 ]
 [0.04 0.2  0.29 0.41 0.03 0.02]
 [0.33 0.04 0.3  0.25 0.05 0.03]
 [0.24 0.46 0.02 0.05 0.   0.23]
 [0.09 0.33 0.1  0.3  0.05 0.12]
 [0.28 0.02 0.02 0.12 0.05 0.52]
 [0.58 0.18 0.   0.07 0.03 0.14]]

People Weight => using inverse
[[ 0.07  0.26  0.17  0.28  0.03  0.19]
 [ 0.06  0.39  0.17  0.27  0.1   0.02]
 [ 0.34  0.02  0.23  0.08  0.08  0.25]
 [ 0.25  0.02  0.31  0.18  0.04  0.2 ]
 [ 0.04  0.2   0.29  0.41  0.03  0.02]
 [ 0.33  0.04  0.3   0.25  0.05  0.03]
 [ 0.24  0.46  0.02  0.05  0.    0.23]
 [ 0.09  0.33  0.1   0.3   0.05  0.12]
 [ 0.28  0.02  0.02  0.12  0.05  0.52]
 [ 0.58  0.18 -0.    0.07  0.03  0.14]]

If we do not know the Restaurant Matrix, then we could use np.linalg.lstsq and calculate the least square estimation to arrive at the weights
